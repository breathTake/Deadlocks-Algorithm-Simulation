Deadlocks:
There are a few requirements that have to be met for a deadlock to occur. The requirements are:

1. Mutual Exclusion:
At least one resource must be held in a non-sharable mode, meaning it cannot be simultaneously used by more than one process.
The simulation fulfils this because there is a limited number of resources of each type.

2. Hold and Wait:
Processes currently holding resources may request additional resources, while still retaining the resources they already possess.
The simulation fulfils this by waiting for the next resource to be found before releasing the last resource it occupies.

3. No Preemption:
Resources cannot be forcibly taken away from a process that is holding them, they can only be released voluntarily by the holding process.
The simulation fulfils this because there is no way to take the resources from a process (not by the main thread and not by other processes) once it occupies them.

4. Circular Wait:
A circular chain of two or more processes exists, where each process holds a resource that the next process in the chain is waiting for.
The simulation fulfils this because the order in which the resources are being requested is random.

With these requirements met a deadlock can occur, however, it is not guaranteed to because the order of resources and the amount of each resource a process needs are randomized.
After a few tries a deadlock will occur, visible in two or more resources which are being used an never released again.
